* Defuns
**** Reload
Reloads the configuration
#+BEGIN_SRC emacs-lisp
(defun alex/reload ()
  (interactive)
  (load-file (expand-file-name "init.el" user-emacs-directory)))
(provide 'alex/reload)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun alex/config ()
  (interactive)
  (find-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

* Workflow
**** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands(magit))
#+END_SRC
**** Aggressive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :hook(prog-mode . aggressive-indent-mode))
#+END_SRC
**** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :straight ripgrep
  :straight projectile
  :config(setq projectile-completion-system 'ivy
		projectile-project-search-path '("~/projects")
		projectile-indexing-method 'alien))
#+END_SRC
Counsel-projectile replaces a bunch of the projectile functions to use ivy.
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :after projectile
  :commands(counsel-projectile
	    counsel-projectile-switch-project
	    counsel-projectile-find-file))
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :disabled t
  :hook(prog-mode . company-mode))
#+END_SRC
* Keyboard
**** Evil
I don't like RSI, so I use evil. Don't @ me.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
    (setq evil-want-keybinding nil)
    (evil-mode 1))
#+END_SRC
Evil works better if you force modes to cooperate.
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :init(evil-collection-init))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :after evil
  :after magit
  :config(setq evil-magit-state 'normal))
#+END_SRC
**** I'm too used to tmux
#+BEGIN_SRC emacs-lisp
(defun setup-input-decode-map ()
  (define-key input-decode-map (kbd "C-a") (kbd "C-x"))
  (define-key input-decode-map (kbd "M-a") (kbd "M-x")))
(setup-input-decode-map)
(global-set-key (kbd "C-x |") (lambda () (interactive)(split-window-horizontally) (other-window 1)))
(global-set-key (kbd "C-x _") (lambda () (interactive)(split-window-vertically) (other-window 1)))
(global-set-key (kbd "C-x \\") (lambda () (interactive)(split-window-horizontally) (other-window 1)))
(global-set-key (kbd "C-x -") (lambda () (interactive)(split-window-vertically) (other-window 1)))
#+END_SRC
* User Interface
**** Font Size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140)
#+END_SRC
** Libraries
**** All The Icons
This is required for pretty icons etc.
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
    :demand t)
#+END_SRC
** Meta UI
**** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
    :config(dashboard-setup-startup-hook))
#+END_SRC
**** Counsel/Ivy
  Better M-x and cool stuff
  #+BEGIN_SRC emacs-lisp
  (use-package ivy
:straight ivy
:straight counsel
:hook(after-init . counsel-mode))
  #+END_SRC
**** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :config(setq doom-modeline-height 1)
  :custom-face
  (mode-line ((t (:height 100))))
  (mode-line-inactive ((t (:height 100))))
  :hook(after-init . doom-modeline-mode))
#+END_SRC
** Colours
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :if(display-graphic-p)
  :after org
  :config
  (load-theme 'doom-Iosvkem t)
  (doom-themes-org-config))
#+END_SRC
* Org
Oh baby, there's some shit here boys.
#+BEGIN_SRC emacs-lisp
(setq load-path (cl-remove-if (lambda (x) (string-match-p "org$" x)) load-path))
(use-package 
  (use-package org
    :straight org-plus-contrib
    :mode("\\.org$" . org-mode)
    :commands(org-mode
	      org-capture)
    :init
    (setq org-directory "~/notes"
	  org-default-notes-file (expand-file-name "inbox.org" org-directory)
	  org-agenda-files (list (expand-file-name org-directory)))
    (org-reload)
    :custom-face
    (org-level-1 ((t (:inherit outline-1 :height 1.5))))
    (org-level-2 ((t (:inherit outline-2 :height 1.4))))
    (org-level-3 ((t (:inherit outline-3 :height 1.3))))
    (org-level-4 ((t (:inherit outline-4 :height 1.2))))
    (org-level-5 ((t (:inherit outline-5 :height 1.1))))
    (org-level-6 ((t (:inherit outline-6 :height 1.0))))
    (org-level-7 ((t (:inherit outline-7 :height 1.0))))
    (org-level-8 ((t (:inherit outline-8 :height 1.0)))))
#+END_SRC
**** Mixed Pitch Mode
     #+BEGIN_SRC emacs-lisp
     (use-package mixed-pitch
     :after org
     :custom-face(variable-pitch ((t (:family "ETBembo" :height 160))))
     :hook(org-mode . mixed-pitch-mode))
#+END_SRC
**** Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :hook(org-mode . org-bullets-mode)
  :config(setq org-bullets-bullet-list '(" ")))
#+END_SRC
**** Writeroom
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :commands(writeroom-mode))
#+END_SRC
* Languages
**** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
    :mode("\\.rs\\'" . rust-mode))
#+END_SRC
